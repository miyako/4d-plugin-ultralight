/* --------------------------------------------------------------------------------
 #
 #  4DPlugin-Ultralight.cpp
 #	source generated by 4D Plugin Wizard
 #	Project : Ultralight
 #	author : miyako
 #	2019/09/27
 #  
 # --------------------------------------------------------------------------------*/

#include "4DPlugin-Ultralight.h"

#include <Ultralight/Ultralight.h>

using namespace ultralight;

#pragma mark -

void PluginMain(PA_long32 selector, PA_PluginParameters params) {
    
	try
	{
        switch(selector)
        {
			// --- Ultralight
            
			case 1 :
                PA_RunInMainProcess((PA_RunInMainProcessProcPtr) Ultralight_Test, params);
				break;

        }

	}
	catch(...)
	{

	}
}

class MyApp : public LoadListener {
    RefPtr<Renderer> renderer_;
    RefPtr<View> view_;
    bool done_ = false;
public:
    MyApp() {
        auto& platform = Platform::instance();
        IFileSystem *filesystem = new IFileSystem();
        
        platform.set_file_system(filesystem);
        ///
        /// Create our Renderer (you should only create this once per application)
        ///
        renderer_ = Renderer::Create();
        
        ///
        /// Create our View.
        ///
        view_ = renderer_->CreateView(200, 200, false);
        
        ///
        /// Register our MyApp instance as a load listener so we can handle the
        /// View's OnFinishLoading event below.
        ///
        view_->set_load_listener(this);
        
        ///
        /// Load a string of HTML.
        ///
        

        
        view_->LoadURL("file:///Users/miyako/Desktop/4d-plugin-ultralight/test/Resources/Takasebune/main.xhtml");
        //view_->LoadHTML("<h1>Hello!</h1><p>Welcome to Ultralight!</p>");
    }
    
    virtual ~MyApp() {}
    
    void Run() {
        ///
        /// Continuously update our Renderer until are done flag is set to true.
        ///
        /// @note Calling Renderer::Update handles any pending network requests,
        ///       resource loads, and JavaScript timers.
        ///
        while (!done_)
            renderer_->Update();
    }
    
    ///
    /// Inherited from LoadListener, this event is called when the View finishes
    /// loading a page into the main frame.
    ///
    virtual void OnFinishLoading(ultralight::View* caller) {
        ///
        /// Render all Views (the default GPUDriver paints each View to an
        /// offscreen Bitmap which you can access via View::Bitmap)
        ///
        renderer_->Render();
        
        ///
        /// Get our View's bitmap and write it to a PNG.
        ///
        view_->bitmap()->WritePNG("/Users/miyako/Desktop/result.png");
        
        ///
        /// Set our done flag to true to exit the Run loop.
        ///
        done_ = true;
    }
};

MyApp *app = NULL;

#pragma mark -

void Ultralight_Test(PA_PluginParameters params) {

    if(!app)
    {
        app = new MyApp();
    }
    
    app->Run();
    
}

